# GitHub Actions CI/CD for Derivatives Platform
# Automated testing, building, and deployment

name: Derivatives Platform CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'axiom/derivatives/**'
      - 'tests/derivatives/**'
      - 'requirements-derivatives.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'axiom/derivatives/**'
      - 'tests/derivatives/**'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: axiom/derivatives

jobs:
  # =============================================================================
  # TEST JOB
  # =============================================================================
  test:
    name: Test Derivatives Platform
    runs-on: ubuntu-latest-gpu  # GPU runner for realistic testing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install CUDA (if GPU available)
        run: |
          # Check GPU
          nvidia-smi || echo "No GPU available, will test on CPU"
      
      - name: Install dependencies
        run: |
          pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118
          pip install -r requirements-derivatives.txt
          pip install pytest pytest-cov pytest-benchmark
      
      - name: Run unit tests
        run: |
          pytest tests/derivatives/ -v --cov=axiom/derivatives --cov-report=xml --cov-report=term
      
      - name: Run performance benchmarks
        run: |
          pytest tests/derivatives/test_ultra_fast_greeks.py --benchmark-only --benchmark-json=benchmark.json
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: derivatives
      
      - name: Check performance regression
        run: |
          python3 -c "
          import json
          with open('benchmark.json') as f:
              data = json.load(f)
          mean_time = data['benchmarks'][0]['stats']['mean']
          mean_us = mean_time * 1_000_000
          print(f'Mean latency: {mean_us:.2f} microseconds')
          assert mean_us < 100, f'Performance regression: {mean_us:.2f}us > 100us'
          "
  
  # =============================================================================
  # LINT & CODE QUALITY
  # =============================================================================
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install linting tools
        run: |
          pip install black mypy flake8 pylint
      
      - name: Run Black (formatting)
        run: |
          black --check axiom/derivatives/
      
      - name: Run MyPy (type checking)
        run: |
          mypy axiom/derivatives/ --ignore-missing-imports
      
      - name: Run Flake8 (linting)
        run: |
          flake8 axiom/derivatives/ --max-line-length=100 --ignore=E203,W503
      
      - name: Run Pylint (code quality)
        run: |
          pylint axiom/derivatives/ --disable=C0103,C0114,C0115,C0116
  
  # =============================================================================
  # BUILD DOCKER IMAGE
  # =============================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: axiom/derivatives/docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://derivatives-staging.axiom-platform.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Deploy to staging
        run: |
          kubectl apply -f axiom/derivatives/kubernetes/deployment.yaml -n derivatives-staging
          kubectl rollout status deployment/derivatives-api -n derivatives-staging --timeout=5m
      
      - name: Run smoke tests
        run: |
          STAGING_URL=https://derivatives-staging.axiom-platform.com
          curl -f $STAGING_URL/health || exit 1
          curl -f $STAGING_URL/ready || exit 1
  
  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://derivatives.axiom-platform.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Deploy to production (blue-green)
        run: |
          # Deploy to green environment first
          kubectl apply -f axiom/derivatives/kubernetes/deployment.yaml -n derivatives-green
          kubectl rollout status deployment/derivatives-api -n derivatives-green --timeout=10m
          
          # Run production smoke tests
          kubectl port-forward svc/derivatives-api-svc 8000:80 -n derivatives-green &
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          
          # Switch traffic to green
          kubectl apply -f axiom/derivatives/kubernetes/service-green.yaml -n derivatives
          
          # Keep blue for rollback (manual cleanup after 24h)
      
      - name: Notify deployment
        if: success()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{"text":"✅ Derivatives platform deployed to production successfully"}'
      
      - name: Notify failure
        if: failure()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{"text":"❌ Derivatives platform deployment FAILED"}'

  # =============================================================================
  # PERFORMANCE REGRESSION CHECK
  # =============================================================================
  performance-check:
    name: Performance Regression Check
    runs-on: ubuntu-latest-gpu
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install torch --index-url https://download.pytorch.org/whl/cu118
          pip install -r requirements-derivatives.txt
          pip install pytest-benchmark
      
      - name: Run benchmark
        run: |
          pytest tests/derivatives/test_ultra_fast_greeks.py \
            --benchmark-only \
            --benchmark-json=output.json \
            --benchmark-save=current
      
      - name: Compare with baseline
        run: |
          # Download baseline from previous run
          # Compare and fail if regression > 10%
          python3 scripts/check_performance_regression.py