# Investment Banking Analytics - Performance & Optimization Testing
# Tests DSPy optimization, financial analysis performance, and M&A workflow efficiency

name: Investment Banking Performance Tests

on:
  schedule:
    # Run performance tests weekly
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC
  workflow_dispatch:
    # Allow manual triggering

jobs:
  performance-validation:
    name: M&A Analysis Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout Investment Banking Platform
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Performance Testing Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio pytest-benchmark

    - name: Test DSPy Investment Banking Optimization
      run: |
        echo "🔧 Testing DSPy Investment Banking optimization modules..."
        python -c "
        from axiom.dspy_modules.optimizer import InvestmentBankingOptimizer
        from axiom.dspy_modules.hyde import InvestmentBankingHyDEModule
        from axiom.dspy_modules.multi_query import InvestmentBankingMultiQueryModule
        
        # Test optimizer creation (without actual optimization)
        optimizer = InvestmentBankingOptimizer()
        
        # Test training data creation
        training_data = optimizer.create_investment_banking_training_data()
        assert len(training_data) >= 3, 'Insufficient M&A training data'
        
        # Verify M&A-specific training examples
        ma_examples = [ex for ex in training_data if 'acquisition' in ex.query.lower()]
        assert len(ma_examples) > 0, 'No M&A training examples found'
        
        print(f'✅ DSPy optimizer ready with {len(training_data)} M&A training examples')
        "

    - name: Test Investment Banking Query Processing Performance
      run: |
        echo "⚡ Testing M&A query processing performance..."
        python -c "
        import time
        from axiom.graph.nodes.planner import detect_analysis_type, extract_company_info, create_ib_task_plans
        
        # Performance test with various M&A queries
        test_queries = [
            'Microsoft acquisition of OpenAI strategic due diligence analysis',
            'Tesla NVIDIA merger valuation with synergy assessment', 
            'Apple Netflix acquisition market impact analysis',
            'Amazon Salesforce M&A strategic fit evaluation',
            'Google Meta merger regulatory compliance assessment'
        ]
        
        total_start = time.time()
        results = []
        
        for query in test_queries:
            start = time.time()
            
            analysis_type = detect_analysis_type(query)
            company_info = extract_company_info(query)
            tasks = create_ib_task_plans(query, analysis_type, company_info, '')
            
            duration = time.time() - start
            results.append({
                'query': query[:30] + '...',
                'analysis_type': analysis_type,
                'tasks': len(tasks),
                'duration_ms': round(duration * 1000, 2)
            })
        
        total_duration = time.time() - total_start
        avg_duration = total_duration / len(test_queries)
        
        print(f'📊 Performance Results:')
        for result in results:
            print(f'  • {result[\"query\"]} → {result[\"tasks\"]} tasks ({result[\"duration_ms\"]}ms)')
        
        print(f'⚡ Average query processing: {avg_duration*1000:.1f}ms')
        print(f'🎯 Total processing time: {total_duration*1000:.1f}ms for {len(test_queries)} queries')
        
        # Performance assertions
        assert avg_duration < 0.1, f'Query processing too slow: {avg_duration:.3f}s'
        assert all(r[\"tasks\"] >= 3 for r in results), 'Insufficient task generation'
        
        print('✅ M&A query processing performance validated!')
        "

    - name: Test Financial Validation Performance
      run: |
        echo "📈 Testing financial validation performance..."
        python -c "
        import time
        from axiom.utils.validation import FinancialValidator, validate_investment_banking_workflow
        
        # Test large-scale financial validation
        test_metrics_sets = [
            {
                'revenue': 10000000000 + i * 1000000,
                'ebitda': 2500000000 + i * 250000,
                'pe_ratio': 20 + i * 0.5,
                'debt_to_equity': 0.5 + i * 0.1,
                'confidence': 0.8 + i * 0.01
            }
            for i in range(50)  # 50 test cases
        ]
        
        start = time.time()
        
        for i, metrics in enumerate(test_metrics_sets):
            errors = FinancialValidator.validate_financial_metrics(metrics)
            # Expect most to pass validation
            
        duration = time.time() - start
        throughput = len(test_metrics_sets) / duration
        
        print(f'📊 Financial Validation Performance:')
        print(f'  • Processed: {len(test_metrics_sets)} metric sets')
        print(f'  • Duration: {duration*1000:.1f}ms')
        print(f'  • Throughput: {throughput:.1f} validations/sec')
        
        assert throughput > 100, f'Validation throughput too low: {throughput:.1f}/sec'
        assert duration < 2.0, f'Validation too slow: {duration:.2f}s'
        
        print('✅ Financial validation performance acceptable!')
        "

    - name: Test Memory Usage and Resource Efficiency
      run: |
        echo "🧠 Testing memory usage and resource efficiency..."
        python -c "
        import psutil
        import os
        from axiom.config.ai_layer_config import ai_layer_mapping
        from axiom.ai_client_integrations.provider_factory import provider_factory
        
        # Get initial memory usage
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # Load all system components
        configs = ai_layer_mapping.layer_configs
        providers = provider_factory.get_available_providers()
        
        # Get final memory usage
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_increase = final_memory - initial_memory
        
        print(f'💾 Memory Usage Analysis:')
        print(f'  • Initial memory: {initial_memory:.1f} MB')
        print(f'  • Final memory: {final_memory:.1f} MB')
        print(f'  • Memory increase: {memory_increase:.1f} MB')
        print(f'  • Configs loaded: {len(configs)}')
        print(f'  • Providers available: {len(providers)}')
        
        # Memory usage should be reasonable
        assert memory_increase < 100, f'Excessive memory usage: {memory_increase:.1f} MB'
        
        print('✅ Memory usage within acceptable limits!')
        "

  # Investment Banking quality assurance
  quality-assurance:
    name: Investment Banking Quality Assurance
    runs-on: ubuntu-latest
    needs: [performance-validation]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Investment Banking Feature Completeness Check
      run: |
        echo "🎯 Validating Investment Banking feature completeness..."
        python -c "
        # Verify all M&A analysis types are implemented
        from axiom.config.ai_layer_config import AnalysisLayer
        
        required_ma_features = [
            AnalysisLayer.MA_DUE_DILIGENCE,
            AnalysisLayer.MA_VALUATION,
            AnalysisLayer.MA_MARKET_ANALYSIS, 
            AnalysisLayer.MA_STRATEGIC_FIT
        ]
        
        print('📋 Investment Banking Features:')
        for feature in required_ma_features:
            print(f'  ✅ {feature.value.replace(\"_\", \" \").title()}')
        
        # Verify provider support
        from axiom.ai_client_integrations.provider_factory import provider_factory
        provider_classes = provider_factory.PROVIDER_CLASSES
        
        print('🤖 AI Provider Support:')
        for provider_name in ['openai', 'claude', 'sglang']:
            if provider_name in provider_classes:
                print(f'  ✅ {provider_name.title()} Provider')
            else:
                raise AssertionError(f'Missing {provider_name} provider')
        
        print('✅ All Investment Banking features complete!')
        "

    - name: Validate Conservative Financial Settings
      run: |
        echo "⚖️  Final validation of conservative financial analysis settings..."
        python -c "
        from axiom.config.ai_layer_config import ai_layer_mapping, AnalysisLayer
        
        # Check all financial analysis layers have conservative settings
        financial_layers = [
            AnalysisLayer.MA_DUE_DILIGENCE,
            AnalysisLayer.MA_VALUATION,
            AnalysisLayer.OBSERVER
        ]
        
        print('📊 Conservative Settings Validation:')
        for layer in financial_layers:
            config = ai_layer_mapping.get_layer_config(layer)
            print(f'  • {layer.value}: Temperature={config.temperature}, Consensus={config.use_consensus}')
            
            # Assert conservative settings
            assert config.temperature <= 0.1, f'{layer.value} temperature too high: {config.temperature}'
            
            # Critical M&A decisions should use consensus
            if 'ma_' in layer.value:
                assert config.use_consensus == True, f'{layer.value} should use consensus mode'
        
        print('✅ All financial analysis settings appropriately conservative!')
        "