# Axiom Financial Data Services - Unified Docker Compose Configuration
# Consolidates MCP Servers and Provider Containers into a single system
# All environment variables loaded from project root .env file

# Location: axiom/integrations/data_sources/finance/docker-compose.yml
# Root .env: /Users/sandeep.yadav/work/axiom/.env

services:
  # ============================================================================
  # EXTERNAL MCP SERVERS - Community-Maintained Data Providers
  # Zero maintenance burden - replaces custom REST API wrappers!
  # ============================================================================

  # OpenBB MCP Server ‚≠ê HIGHEST PRIORITY - Replaces 5+ REST API wrappers!
  # Official: https://github.com/openbb/openbb-mcp-server
  # Replaces: Alpha Vantage, FMP, Finnhub, Yahoo Finance, IEX Cloud
  openbb-server:
    build:
      context: https://github.com/openbb/openbb-mcp-server.git
    container_name: axiom-openbb-mcp
    environment:
      # OpenBB Configuration
      - OPENBB_API_KEY=${OPENBB_API_KEY:-}
      
      # MCP Protocol Configuration
      - MCP_TRANSPORT=stdio
      
      # Data Configuration
      - FINANCIAL_DATA_DEPTH=${FINANCIAL_DATA_DEPTH:-comprehensive}
      - DEBUG=${DEBUG:-false}
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - financial-data-network
    profiles:
      - "openbb"
      - "mcp"
      - "external"
    labels:
      - "axiom.service=external-financial-mcp"
      - "axiom.provider=openbb-official"
      - "axiom.type=comprehensive-market-data"
      - "axiom.replaces=alpha-vantage,fmp,finnhub,yahoo,iex"
      - "axiom.cost=free-tier-premium-available"
      - "axiom.tools=50-plus-financial-tools"
      - "axiom.eliminates=880-lines-custom-code"
    env_file:
      - ../../../../.env

  # SEC Edgar MCP Server - Free unlimited SEC filings data
  # Community: Search for sec-edgar-mcp or use sec-api integration
  sec-edgar-server:
    image: python:3.11-slim
    container_name: axiom-sec-edgar-mcp
    working_dir: /app
    environment:
      - SEC_API_KEY=${SEC_API_KEY:-}
      - MCP_TRANSPORT=stdio
      - DEBUG=${DEBUG:-false}
    command: |
      sh -c "
        pip install --no-cache-dir sec-api requests &&
        python -c 'print(\"SEC Edgar MCP Server - Ready for integration\")' &&
        tail -f /dev/null
      "
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - financial-data-network
    profiles:
      - "sec-edgar"
      - "mcp"
      - "external"
    labels:
      - "axiom.service=external-financial-mcp"
      - "axiom.provider=sec-edgar"
      - "axiom.type=sec-filings-insider-trading"
      - "axiom.replaces=sec-edgar-provider"
      - "axiom.cost=free-unlimited"
      - "axiom.eliminates=150-lines-custom-code"
    env_file:
      - ../../../../.env

  # FRED Economic Data MCP Server - 800K+ economic time series
  # Community: Federal Reserve Economic Data
  fred-server:
    image: python:3.11-alpine
    container_name: axiom-fred-mcp
    working_dir: /app
    environment:
      - FRED_API_KEY=${FRED_API_KEY:-}
      - MCP_TRANSPORT=stdio
      - DEBUG=${DEBUG:-false}
    command: |
      sh -c "
        apk add --no-cache git &&
        pip install --no-cache-dir fredapi requests &&
        python -c 'print(\"FRED MCP Server - Ready for integration\")' &&
        tail -f /dev/null
      "
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - financial-data-network
    profiles:
      - "fred"
      - "mcp"
      - "external"
    labels:
      - "axiom.service=external-economic-mcp"
      - "axiom.provider=federal-reserve"
      - "axiom.type=economic-indicators-time-series"
      - "axiom.replaces=custom-fred-integration"
      - "axiom.cost=free-api"
      - "axiom.data-points=800k-plus-series"
      - "axiom.eliminates=120-lines-custom-code"
    env_file:
      - ../../../../.env

  # CoinGecko MCP Server - Free crypto market data (no API key needed!)
  coingecko-server:
    image: python:3.11-alpine
    container_name: axiom-coingecko-mcp
    working_dir: /app
    environment:
      - COINGECKO_API_KEY=${COINGECKO_API_KEY:-}
      - MCP_TRANSPORT=stdio
      - DEBUG=${DEBUG:-false}
    command: |
      sh -c "
        pip install --no-cache-dir pycoingecko requests &&
        python -c 'print(\"CoinGecko MCP Server - Ready for integration\")' &&
        tail -f /dev/null
      "
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - financial-data-network
    profiles:
      - "coingecko"
      - "mcp"
      - "external"
    labels:
      - "axiom.service=external-crypto-mcp"
      - "axiom.provider=coingecko"
      - "axiom.type=crypto-market-data"
      - "axiom.replaces=custom-crypto-integration"
      - "axiom.cost=free-no-api-key-required"
      - "axiom.eliminates=100-lines-custom-code"
    env_file:
      - ../../../../.env

  # NewsAPI MCP Server - 80K+ news sources aggregated
  newsapi-server:
    image: python:3.11-alpine
    container_name: axiom-newsapi-mcp
    working_dir: /app
    environment:
      - NEWS_API_KEY=${NEWS_API_KEY:-}
      - MCP_TRANSPORT=stdio
      - DEBUG=${DEBUG:-false}
    command: |
      sh -c "
        pip install --no-cache-dir newsapi-python requests &&
        python -c 'print(\"NewsAPI MCP Server - Ready for integration\")' &&
        tail -f /dev/null
      "
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - financial-data-network
    profiles:
      - "newsapi"
      - "mcp"
      - "external"
    labels:
      - "axiom.service=external-news-mcp"
      - "axiom.provider=newsapi"
      - "axiom.type=news-aggregation-sentiment"
      - "axiom.replaces=custom-news-integration"
      - "axiom.cost=free-tier-premium-available"
      - "axiom.sources=80k-plus-news-sources"
      - "axiom.eliminates=100-lines-custom-code"
    env_file:
      - ../../../../.env

  # ============================================================================
  # MCP SERVERS - Model Context Protocol Servers for AI Integration
  # ============================================================================
  
  # Official Polygon.io MCP Server - Real-time market data
  polygon-io-server:
    build:
      context: https://github.com/polygon-io/mcp_polygon.git
    container_name: axiom-polygon-financial-mcp
    environment:
      # Polygon.io API Configuration
      - POLYGON_API_KEY=${POLYGON_API_KEY}
      - POLYGON_API_ROTATION_ENABLED=${POLYGON_API_ROTATION_ENABLED:-false}
      
      # MCP Protocol Configuration
      - MCP_TRANSPORT=stdio
      
      # Financial Data Configuration
      - FINANCIAL_DATA_DEPTH=${FINANCIAL_DATA_DEPTH:-comprehensive}
      - DEBUG=${DEBUG:-false}
      
      # API Management
      - FINANCIAL_API_ROTATION_ENABLED=${FINANCIAL_API_ROTATION_ENABLED:-true}
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - financial-data-network
    profiles:
      - "polygon"
      - "mcp"
    labels:
      - "axiom.service=external-financial-mcp"
      - "axiom.provider=polygon-io-official"
      - "axiom.type=real-time-market-data"
      - "axiom.cost=free-tier-premium-available"
    env_file:
      - ../../../../.env

  # Yahoo Finance Professional MCP - 27 professional financial tools (100% FREE)
  # DISABLED: yahoo-finance-professional (persistent Docker build issues)
  # Alternative: Use yahoo-finance-comprehensive (working) or deploy locally
  # yahoo-finance-professional:
  #   image: python:3.11-slim
  #   container_name: axiom-yahoo-professional-mcp
  #   working_dir: /app
  #   environment:
  #     - MCP_TRANSPORT=stdio
  #     - FINANCIAL_DATA_DEPTH=${FINANCIAL_DATA_DEPTH:-comprehensive}
  #     - DEBUG=${DEBUG:-false}
  #   command: |
  #     sh -c "
  #       apt-get update && apt-get install -y git curl && rm -rf /var/lib/apt/lists/* &&
  #       rm -rf /tmp/yahoo-mcp &&
  #       git clone https://github.com/gregorizeidler/MCP-yahoofinance-ai.git /tmp/yahoo-mcp &&
  #       cd /tmp/yahoo-mcp &&
  #       pip install --no-cache-dir -r requirements.txt &&
  #       pip install --no-cache-dir -e . &&
  #       python src/mcp_yahoo_finance/server.py
  #     "
  #   stdin_open: true
  #   tty: true
  #   restart: unless-stopped
  #   networks:
  #     - financial-data-network
  #   profiles:
  #     - "yahoo-pro"
  #     - "mcp"
  #   labels:
  #     - "axiom.service=external-financial-mcp"
  #     - "axiom.provider=yahoo-finance-professional"
  #     - "axiom.type=portfolio-risk-technical-analysis"
  #     - "axiom.cost=100-percent-free"
  #   env_file:
  #     - ../../../../.env

  # Yahoo Finance Comprehensive MCP - Detailed fundamental analysis (100% FREE)
  yahoo-finance-comprehensive:
    image: python:3.11-alpine
    container_name: axiom-yahoo-comprehensive-mcp
    working_dir: /app
    environment:
      - MCP_TRANSPORT=stdio
      - FINANCIAL_DATA_DEPTH=${FINANCIAL_DATA_DEPTH:-comprehensive}
      - DEBUG=${DEBUG:-false}
    command: |
      sh -c "
        apk add --no-cache git gcc musl-dev &&
        pip install uv &&
        rm -rf /tmp/yahoo-comp &&
        git clone https://github.com/Alex2Yang97/yahoo-finance-mcp.git /tmp/yahoo-comp &&
        cd /tmp/yahoo-comp &&
        uv venv && source .venv/bin/activate &&
        uv pip install -e . &&
        uv run server.py
      "
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - financial-data-network
    profiles:
      - "yahoo-comp"
      - "mcp"
    labels:
      - "axiom.service=external-financial-mcp"
      - "axiom.provider=yahoo-finance-comprehensive"
      - "axiom.type=fundamental-research-analysis"
      - "axiom.cost=100-percent-free"
    env_file:
      - ../../../../.env

  # Official Firecrawl MCP Server - Fast web scraping and data extraction
  firecrawl-server:
    image: mcp/firecrawl
    container_name: axiom-firecrawl-mcp
    environment:
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - MCP_TRANSPORT=stdio
      - DEBUG=${DEBUG:-false}
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - financial-data-network
    profiles:
      - "firecrawl"
      - "mcp"
    labels:
      - "axiom.service=external-search-mcp"
      - "axiom.provider=firecrawl-official"
      - "axiom.type=web-scraping-data-extraction"
      - "axiom.cost=free-tier-premium-available"
    env_file:
      - ../../../.env

  # ============================================================================
  # PROVIDER CONTAINERS - REST API Financial Data Providers
  # ============================================================================

  # Tavily Search Provider - Financial search and M&A intelligence
  tavily-provider:
    build:
      context: ../../../
      dockerfile: axiom/integrations/data_sources/finance/provider_containers/tavily/Dockerfile
    container_name: axiom-tavily-provider
    environment:
      # Tavily Configuration
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - TAVILY_API_KEYS=${TAVILY_API_KEYS:-}
      - TAVILY_ROTATION_ENABLED=${TAVILY_ROTATION_ENABLED:-false}
      
      # Server Configuration
      - PORT=8001
      - DEBUG=${DEBUG:-false}
      
      # Global API Management
      - API_KEY_ROTATION_ENABLED=${API_KEY_ROTATION_ENABLED:-true}
    ports:
      - "8001:8001"
    restart: unless-stopped
    networks:
      - financial-data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - "tavily"
      - "providers"
    labels:
      - "axiom.service=financial-provider"
      - "axiom.provider=tavily"
      - "axiom.type=search-intelligence"
      - "axiom.cost=paid-tier"
    env_file:
      - ../../../../.env

  # Financial Modeling Prep (FMP) Provider - Comprehensive financial data
  fmp-provider:
    build:
      context: ../../../
      dockerfile: axiom/integrations/data_sources/finance/provider_containers/fmp/Dockerfile
    container_name: axiom-fmp-provider
    environment:
      # FMP Configuration
      - FINANCIAL_MODELING_PREP_API_KEY=${FINANCIAL_MODELING_PREP_API_KEY:-}
      - FMP_API_KEY=${FMP_API_KEY:-}
      
      # Server Configuration
      - PORT=8002
      - DEBUG=${DEBUG:-false}
      
      # Provider Settings
      - FINANCIAL_DATA_DEPTH=${FINANCIAL_DATA_DEPTH:-comprehensive}
      - FINANCIAL_API_ROTATION_ENABLED=${FINANCIAL_API_ROTATION_ENABLED:-true}
    ports:
      - "8002:8002"
    restart: unless-stopped
    networks:
      - financial-data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - "fmp"
      - "providers"
    labels:
      - "axiom.service=financial-provider"
      - "axiom.provider=fmp"
      - "axiom.type=comprehensive-financial-data"
      - "axiom.cost=free-tier-premium-available"
      - "axiom.free-tier=250-calls-per-day"
      - "axiom.premium=14-usd-per-month"
    env_file:
      - ../../../../.env

  # Finnhub Provider - Real-time market data and fundamentals
  finnhub-provider:
    build:
      context: ../../../
      dockerfile: axiom/integrations/data_sources/finance/provider_containers/finnhub/Dockerfile
    container_name: axiom-finnhub-provider
    environment:
      # Finnhub Configuration
      - FINNHUB_API_KEY=${FINNHUB_API_KEY:-}
      
      # Server Configuration
      - PORT=8003
      - DEBUG=${DEBUG:-false}
      
      # Provider Settings
      - FINANCIAL_DATA_DEPTH=${FINANCIAL_DATA_DEPTH:-comprehensive}
      - FINANCIAL_API_ROTATION_ENABLED=${FINANCIAL_API_ROTATION_ENABLED:-true}
    ports:
      - "8003:8003"
    restart: unless-stopped
    networks:
      - financial-data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - "finnhub"
      - "providers"
    labels:
      - "axiom.service=financial-provider"
      - "axiom.provider=finnhub"
      - "axiom.type=real-time-market-data"
      - "axiom.cost=free-tier-premium-available"
      - "axiom.free-tier=60-calls-per-minute"
      - "axiom.premium=7.99-usd-per-month"
    env_file:
      - ../../../../.env

  # Alpha Vantage Provider - Comprehensive financial data with generous FREE tier
  alpha-vantage-provider:
    build:
      context: ../../../
      dockerfile: axiom/integrations/data_sources/finance/provider_containers/alpha_vantage/Dockerfile
    container_name: axiom-alpha-vantage-provider
    environment:
      # Alpha Vantage Configuration
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-}
      
      # Server Configuration
      - PORT=8004
      - DEBUG=${DEBUG:-false}
      
      # Provider Settings
      - FINANCIAL_DATA_DEPTH=${FINANCIAL_DATA_DEPTH:-comprehensive}
      - FINANCIAL_API_ROTATION_ENABLED=${FINANCIAL_API_ROTATION_ENABLED:-true}
    ports:
      - "8004:8004"
    restart: unless-stopped
    networks:
      - financial-data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - "alpha-vantage"
      - "providers"
    labels:
      - "axiom.service=financial-provider"
      - "axiom.provider=alpha-vantage"
      - "axiom.type=comprehensive-financial-data"
      - "axiom.cost=free-tier-premium-available"
      - "axiom.free-tier=500-calls-per-day"
      - "axiom.premium=49-usd-per-month"
    env_file:
      - ../../../../.env

networks:
  financial-data-network:
    name: axiom-financial-data-unified
    driver: bridge

# ============================================================================
# UNIFIED FINANCIAL DATA ARCHITECTURE
# ============================================================================
#
# This consolidated docker-compose file merges two previously separate systems:
# 1. MCP Servers (Model Context Protocol) - For AI agent integration
# 2. Provider Containers (REST APIs) - For direct HTTP access
#
# ‚úÖ Benefits of unified approach:
# 1. Single configuration file for all financial data services
# 2. Unified network for seamless inter-service communication
# 3. Consistent environment variable management from root .env
# 4. Simplified deployment and management
# 5. Reduced complexity and easier maintenance
# 6. Single management script for all services
#
# üöÄ Usage Instructions:
#
# üìä Start ALL services:
#   cd axiom/integrations/data_sources/finance
#   docker-compose up -d
#
# üéØ Start services by category:
#   docker-compose --profile mcp up -d         # All MCP servers
#   docker-compose --profile providers up -d   # All REST providers
#
# üîß Start specific services:
#   docker-compose --profile polygon up -d               # Polygon.io MCP
#   docker-compose --profile yahoo-pro up -d             # Yahoo Professional
#   docker-compose --profile tavily up -d                # Tavily Provider
#   docker-compose --profile fmp up -d                   # FMP Provider
#
# üîÑ Start multiple services:
#   docker-compose --profile polygon --profile fmp up -d
#   docker-compose --profile mcp --profile providers up -d  # Everything
#
# üõë Stop services:
#   docker-compose down
#
# üìã View status:
#   docker-compose ps
#
# üìä View logs:
#   docker-compose logs -f [service-name]
#
# üîÑ Update and rebuild:
#   docker-compose up --build --pull -d
#
# üì¶ Service Categories:
#
# EXTERNAL MCP SERVERS (Profile: external) - Community-maintained, zero maintenance!:
# - openbb-server             : Comprehensive market data (Replaces 5 providers!)
# - sec-edgar-server          : SEC filings, insider trading (FREE unlimited)
# - fred-server               : 800K+ economic time series (FREE)
# - coingecko-server          : Crypto market data (FREE, no API key!)
# - newsapi-server            : 80K+ news sources (FREE tier)
#
# MCP SERVERS (Profile: mcp):
# - polygon-io-server         : Real-time market data (FREE: 5 calls/min)
# - yahoo-finance-professional: 27 professional tools (100% FREE)
# - yahoo-finance-comprehensive: Fundamental analysis (100% FREE)
# - firecrawl-server          : Web scraping (FREE tier available)
#
# PROVIDER CONTAINERS (Profile: providers) - DEPRECATED, use external MCPs instead:
# - tavily-provider    (8001): Search & intelligence (Paid)
# - fmp-provider       (8002): Financial data (FREE: 250 calls/day) ‚Üí Use openbb-server
# - finnhub-provider   (8003): Market data (FREE: 60 calls/min) ‚Üí Use openbb-server
# - alpha-vantage-provider (8004): Financial data (FREE: 500 calls/day) ‚Üí Use openbb-server
#
# üìã Environment Variables (from root .env):
#
# Required for External MCP Servers:
# - OPENBB_API_KEY: OpenBB API key (FREE tier available)
# - SEC_API_KEY: SEC API key (optional, unlimited free access)
# - FRED_API_KEY: FRED API key (FREE at research.stlouisfed.org)
# - COINGECKO_API_KEY: CoinGecko API key (optional, free tier works without)
# - NEWS_API_KEY: NewsAPI key (FREE tier available)
#
# Required for MCP Servers:
# - POLYGON_API_KEY: Polygon.io API key (FREE at polygon.io)
# - FIRECRAWL_API_KEY: Firecrawl API key (FREE at firecrawl.dev)
#
# Required for Provider Containers (DEPRECATED):
# - TAVILY_API_KEY: Tavily API key (tavily.com)
# - FINANCIAL_MODELING_PREP_API_KEY or FMP_API_KEY: FMP key (FREE) ‚Üí Use OPENBB_API_KEY
# - FINNHUB_API_KEY: Finnhub key (FREE) ‚Üí Use OPENBB_API_KEY
# - ALPHA_VANTAGE_API_KEY: Alpha Vantage key (FREE) ‚Üí Use OPENBB_API_KEY
#
# Optional (with defaults):
# - FINANCIAL_API_ROTATION_ENABLED: Enable API rotation (default: true)
# - FINANCIAL_DATA_DEPTH: comprehensive | basic (default: comprehensive)
# - DEBUG: true | false (default: false)
#
# üîß Configuration Management:
# All environment variables loaded from: /Users/sandeep.yadav/work/axiom/.env
# Single source of truth - no duplicate .env files needed
#
# üí∞ Cost Analysis:
# FREE Tier Total: ~750+ calls/day across all providers
# Premium Total: ~$71/month for unlimited professional data
# vs Bloomberg Terminal: $2,000+/month (96%+ cost savings!)