version: '3.8'

services:
  # Axiom API Service
  axiom-api:
    build:
      context: ..
      dockerfile: docker/api.Dockerfile
    container_name: axiom-api
    ports:
      - "8000:8000"
    environment:
      # Security
      - SECRET_KEY=${SECRET_KEY:-axiom-secret-key-change-in-production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # Rate Limiting
      - DEFAULT_RATE_LIMIT=100/minute
      - PREMIUM_RATE_LIMIT=1000/minute
      - REDIS_URL=redis://redis:6379
      
      # Database (optional)
      - DATABASE_URL=${DATABASE_URL:-postgresql://axiom:axiom@postgres:5432/axiom}
      
      # Monitoring
      - ENABLE_METRICS=true
      - LOG_LEVEL=info
    depends_on:
      - redis
      - postgres
    volumes:
      - ../axiom:/app/axiom:ro
    networks:
      - axiom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      gunicorn axiom.api.main:app
      --workers 4
      --worker-class uvicorn.workers.UvicornWorker
      --bind 0.0.0.0:8000
      --access-logfile -
      --error-logfile -
      --log-level info

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: axiom-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - axiom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf

  # PostgreSQL for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: axiom-postgres
    environment:
      - POSTGRES_USER=axiom
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-axiom}
      - POSTGRES_DB=axiom
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - axiom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U axiom"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: axiom-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - axiom-api
    networks:
      - axiom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: axiom-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - axiom-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

volumes:
  redis-data:
  postgres-data:
  prometheus-data:

networks:
  axiom-network:
    driver: bridge