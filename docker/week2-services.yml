version: '3.8'

# Combined Week 2 MCP Services
# Redis, Prometheus, and supporting infrastructure

services:
  # Redis for caching and pub/sub
  redis-mcp:
    image: redis:7-alpine
    container_name: axiom-redis-mcp
    ports:
      - "6379:6379"
    volumes:
      - redis-mcp-data:/data
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - axiom-network
    restart: unless-stopped
    labels:
      - "axiom.service=redis-mcp"
      - "axiom.category=storage"
      - "axiom.week=2"

  # Prometheus for metrics
  prometheus-mcp:
    image: prom/prometheus:latest
    container_name: axiom-prometheus-mcp
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-mcp-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - axiom-network
    restart: unless-stopped
    labels:
      - "axiom.service=prometheus-mcp"
      - "axiom.category=monitoring"
      - "axiom.week=2"

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: axiom-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus-mcp
      - redis-mcp
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - axiom-network
    restart: unless-stopped
    labels:
      - "axiom.service=grafana"
      - "axiom.category=monitoring"
      - "axiom.week=2"

  # Redis Commander for Redis management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: axiom-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=redis-mcp:redis-mcp:6379
    depends_on:
      - redis-mcp
    networks:
      - axiom-network
    restart: unless-stopped
    labels:
      - "axiom.service=redis-commander"
      - "axiom.category=management"
      - "axiom.week=2"

volumes:
  redis-mcp-data:
    driver: local
    labels:
      - "axiom.volume=redis-data"
      - "axiom.week=2"
  
  prometheus-mcp-data:
    driver: local
    labels:
      - "axiom.volume=prometheus-data"
      - "axiom.week=2"
  
  grafana-data:
    driver: local
    labels:
      - "axiom.volume=grafana-data"
      - "axiom.week=2"

networks:
  axiom-network:
    driver: bridge
    labels:
      - "axiom.network=main"